;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICA√á√ïES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                      DEZEMBRO DE 2024                           *
;*                 BASEADO NO EXEMPLO DO LIVRO                     *
;*           Desbravando o PIC. David Jos√© de Souza                *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINI√á√ïES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADR√ÉO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINA√á√ÉO DE MEM√ìRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINI√á√ÉO DE COMANDOS DE USU√ÅRIO PARA ALTERA√á√ÉO DA P√ÅGINA DE MEM√ìRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEM√ìRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAM√ìRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARI√ÅVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINI√á√ÉO DOS NOMES E ENDERE√áOS DE TODAS AS VARI√ÅVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDERE√áO INICIAL DA MEM√ìRIA DE
					;USU√ÅRIO
		W_TEMP		;REGISTRADORES TEMPOR√ÅRIOS PARA USO
		STATUS_TEMP	;JUNTO √ÄS INTERRUP√á√ïES
		CONTADOR
		CONTADOR_OVERFLOW
		AUX
		
		;COLOQUE AQUI SUAS NOVAS VARI√ÅVEIS
		;N√ÉO ESQUE√áA COMENT√ÅRIOS ESCLARECEDORES

	ENDC			;FIM DO BLOCO DE DEFINI√á√ÉO DE VARI√ÅVEIS

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINI√á√ÉO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINI√á√ÉO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINI√á√ÉO DE TODOS OS PINOS QUE SER√ÉO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMB√âM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SA√çDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINI√á√ÉO DE TODOS OS PINOS QUE SER√ÉO UTILIZADOS COMO SA√çDA
; RECOMENDAMOS TAMB√âM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDERE√áO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    IN√çCIO DA INTERRUP√á√ÉO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDERE√áO DE DESVIO DAS INTERRUP√á√ïES. A PRIMEIRA TAREFA √â SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERA√á√ÉO FUTURA

	ORG	0x04			;ENDERE√áO INICIAL DA INTERRUP√á√ÉO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUP√á√ÉO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SER√ÉO ESCRITAS AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUP√á√ïES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SA√çDA DA INTERRUP√á√ÉO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUP√á√ÉO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRI√á√ÉO DE FUNCIONAMENTO
; E UM NOME COERENTE √ÄS SUAS FUN√á√ïES.

SUBROTINA1

	;CORPO DA ROTINA

	RETURN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00000000' ;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SA√çDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000111'
	MOVWF	OPTION_REG	;DEFINE OP√á√ïES DE OPERA√á√ÉO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OP√á√ïES DE INTERRUP√á√ïES
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERA√á√ÉO DO COMPARADOR ANAL√ìGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZA√á√ÉO DAS VARI√ÅVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        MOVLW .10
        MOVWF CONTADOR
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
	
MAIN
	DECF CONTADOR, F    ;decrementa a contagem (o contador inicia com 10, pois estou realizando o decremento no comeÁo)
	BTFSS CONTADOR, 7   ;Testando o bit 7 do contador (mais significatio) que no format0 complemento de 2 indica o sinal do numero.
	GOTO  TROCA_DISPLAY ;ou seja, se contador for negativo ele n„o atualiza o display, primeiro reinicia a contagem para 9.
	BTFSS GPIO, GP0	    ;verica o estado atual do led, caso esteja em 1, ira pular para a subrotina desliga led
	GOTO LIGA_LED	    ;subrotina para ligar o led
	GOTO DESLIGA_LED    ;subrotina para desligar o led

	
TROCA_DISPLAY
	CALL CONVERTE_BCD   ;chama a subrotina que ir· converter o valor do contador para o formato bcd (alterando ou n„o os valores de gp5, gp4, gp2, gp1)
	CALL DELAY	    ;introduz um atraso , garantindo que o valor do contador (ou a mudanÁa do led) seja visÌvel por um tempo antes de prosseguir
	GOTO MAIN	    ;retorna para a main para continuar o ciclo
	
DESLIGA_LED
	MOVLW .9	    ;valor de CONTADOR ser· reiniciado para 9 quando o LED for desligado
        MOVWF CONTADOR
	CALL CONVERTE_BCD   ;chama  CONVERTE_BCD para atualizar o display com o valor atual de 9
	CALL    DELAY	    ;introduz um atraso
	BCF GPIO, GP0	    ;limpa o pino GP0, desligando o led
	GOTO MAIN
LIGA_LED
	MOVLW .9	    ;valor de CONTADOR ser· reiniciado para 9 quando o LED for ligado
        MOVWF CONTADOR
	CALL CONVERTE_BCD   ;chama  CONVERTE_BCD para atualizar o display com o valor atual de 9
	CALL    DELAY	    ;introduz um atraso
	BSF GPIO, GP0	    ;seta o pino GP0, ligando o led
	GOTO MAIN

 CONVERTE_BCD
 
	;armazena o valor de W em AUX para us·-lo nos proximos testes
	;Para cada bit de AUX, a subrotina testa se o bit È 1 ou 0 e, com base nisso, seta ou limpa o pino correspondente da porta GPIO.
	
	MOVF    CONTADOR, W
        MOVWF   AUX	   
	
	;GP1 controlado pelo bit 0 de AUX
	BTFSC   AUX, 0
	BSF     GPIO, GP1
	BTFSS   AUX, 0
	BCF     GPIO, GP1

	;GP2 controlado pelo bit 1 de AUX
	BTFSC   AUX, 1
	BSF     GPIO, GP2
	BTFSS   AUX, 1
	BCF     GPIO, GP2

	;GP4 controlado pelo bit 2 de AUX
	BTFSC   AUX, 2
	BSF     GPIO, GP4
	BTFSS   AUX, 2
	BCF     GPIO, GP4

	;GP5 controlado pelo bit 3 de AUX
	BTFSC   AUX, 3
	BSF     GPIO, GP5
	BTFSS   AUX, 3
	BCF     GPIO, GP5
	RETURN
    
	
		    ;Utilizei um intervalo de 25ms por overflow
		    ;Para atingir 25 ms, È necess·rio que o timer0 n„o conte atÈ 255, mas sim atÈ certo valor que faÁa demorar 25 ms.

		    ;cicloTimer = (prescaler / freqClock) x 4
		    ;cicloTimer = (256/ 4x10^6) x 4 
		    ;cicloTimer = 256us
		    ;25ms/ 256us = 97
		    ;Valor inicial do timer = 256 - 97 = 159

		    ;Se o Timer0 parte de 159 e ele sÛ conta atÈ 255, ser· contado 97 incrementos
		    ;Dessa forma, ele demora 97 ◊ 256 µs ? 24,8 = 25 ms para estourar.
		    ;Se cada overflow (partindo de 159) demora 25 ms, quantos overflows precisamos?
		    ;qtdOverflow = 500ms/25ms = 20
	
DELAY
    MOVLW   .20             
    MOVWF   CONTADOR_OVERFLOW

DELAY_LOOP
    MOVLW   .159         
    MOVWF   TMR0		;carrega TMR0 com 159  
    BCF     INTCON, T0IF	;limpa a flag de overflow

ESPERANDO_OVERFLOW
    BTFSS   INTCON, T0IF	;espera atÈ TMR0 estourar
    GOTO    ESPERANDO_OVERFLOW	
    BCF     INTCON, T0IF	;limpa flag para prÛxima contagem
    DECFSZ  CONTADOR_OVERFLOW	;decrementa o loop de 20
    GOTO    DELAY_LOOP		;repete atÈ zerar
    RETURN

END